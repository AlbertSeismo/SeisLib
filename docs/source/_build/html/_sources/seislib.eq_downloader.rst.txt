Download of Teleseismic-Earthquake Recordings: ``EQDownloader``
===============================================================
Class to download surface-wave recordings generated by strong teleseismic earthquakes.

*Example*
---------
    
The following will download seismic data from all the seismic networks 
and stations managed by iris within the region specified by minlatitude, 
maxlatitude, minlongitude, maxlongitude. All such parameters should be passed to
`stations_config`::
    stations_config=dict(
              channel='LH*,BH*,HH*',
              includerestricted=False,
              maxlatitude=12,
              minlatitude=-18,
              minlongitude=90,
              maxlongitude=140)   
..

The above also specifies the preference of downloading 3-component seismograms (ZNE), 
as implied by the asterisk sign. For a given receiver recording an earthquake, either 
of the LH, BH, or HH channels will be downloaded, with priority given from left to right, 
i.e., LH>BH>HH: if LH is not available, BH will be downloaded; if BH is not available, HH will 
be downloaded.
     
In this example, we use all earthquakes characterized by a 
magnitude between 6 and 8.5, by a maximum depth of 50km, and generated 
between the 1.1.2000 and 1.1.2021. The distance between each earthquake
and a given receiver should be more than 20째 (expressed in km) and less
than 140째 (in km)::

    from obspy import UTCDateTime as UTC
    from obspy.geodetics import degrees2kilometers
    events_config=dict(
              starttime=UTC(2000, 1, 1),
              endtime=UTC(2021, 1, 1),
              depthmax=50,
              magmin=6, 
              magmax=8.5,
              distmin=degrees2kilometers(20),
              distmax=degrees2kilometers(140),
                  )      
..
    
We initialize the EQDownloader instance, and then start it::
    
    downloader = EQDownloader(savedir='/path/to/directory',
                              inv_provider='iris',
                              ev_provider='iris',
                              inventory_name='iris.xml',
                              sampling_rate=1,
                              prefilter=(0.001, 0.005, 0.1, 0.4),
                              vmin=1.5,
                              vmax=5.5,
                              units='disp',
                              attach_response=False,
                              stations_config=stations_config,
                              events_config=events_config,
                              verbose=True)        
    downloader.start()
..



.. py:class:: EQDownloader(savedir, inventory_name, inv_provider='iris', user=None, password=None, ev_provider='iris', vmin=1.5, vmax=5.5, sampling_rate=1, units='disp', prefilter=(0.001, 0.005, 0.05, 0.4), attach_response=False, stations_config={}, events_config={}, sleep_time_after_exception=30, verbose=True)
   :module: seislib.eq

*Parameters*
------------

    **savedir** (``str``): Absolute path to the directory where the data will be saved. Inside this directory, a folder named 'data' will be created, inside which the seismograms stored inside subdirectories (one for each seismic event) in the format net.sta.loc.cha.sac. (net=network code, sta=station, loc=location, cha=channel)

    **inventory_name** (``str``): Name of the inventory (obspy.core.inventory.inventory.Inventory) associated with the downloads. This will be saved in xml format in the `savedir`

    **inv_provider** (``str``): Provider of station metadata, passed to obspy.clients.fdsn.Client. Default is `iris`

    **user**, **password** (``str``, optional): User name and password for accessing restricted data. Passed to obspy.clients.fdsn.Client

    **ev_provider** (``str``): Provider of earthquake metadata, passed to obspy.clients.fdsn.Client. Default is `iris`

    **vmin**, **vmax** (``float``): Minimum and maximum velocity of the surface waves. These values are used to establish the starting and ending time of the seismograms to be downloaded with respect to the origin time of given earthquake. Relatively loose limits are to be preferred. Default values are 1.5 and 5.5 (km/s), respectively

    **sampling_rate** (``int`` | ``float``): Final sampling rate of the waveforms, in Hz. Default is 1 Hz

    **units** (``str``): Physical units of the final waveforms. Can be either 'DISP', 'VEL', or 'ACC' (case insensitive). Default is 'DISP'.

    **prefilter** (``tuple``): Bandapass filter applied to the waveforms before removing the intrument response. Default is (0.001, 0.005, 0.05, 0.4)

    **attach_response** (``bool``): If True, the details of the instrument response are attached to the header of the waveforms during their downloads. It can slow down the downloads, but it will make errors due to response information less likely. Default is False

    **stations_config** (``dict``): Dictionary containing optional keys and values passed to obspy.clients.fdsn.Client.get_stations. 

    **events_config** (``dict``): Dictionary containing optional keys and values passed to obspy.clients.fdsn.Client.get_events.  
    Default values are: 
        
        * distmin = 2223.9 (km, corresponding to 20째) 
        * distmax = 15567.3 (km, corresponding to 140째)
        * depthmax = 50 (km) 
        * magmin = 6 
        * magmax = 8.5 
        * starttime = UTC(2000, 1, 1)
        * endtime = UTC(2021, 1, 1)

    .. warning:: 
        The obspy key words 'minmag', 'maxmag', and 'maxdepth' have been renamed as 
        'magmin', 'magmax', and 'depthmax', for better clarity in the code. Passing 
        to event_config one of the (obspy) key words among 'minmag', 'maxmag', and 
        'maxdepth' will result in an error.
    ..

    .. note::
        The above listed default values include 'distmin' and 'distmax' (in km). These refer 
        to the minimum and maximum distance of the epicenter from a given receiver. Note 
        that these two key words correspond to the obspy's 
        'minradius' and 'maxradius', with the only difference that the latters 
        are expressed in degrees. 'distmin' and 'distmax' have been introduced only for 
        achieving a higher consistency in the use of physical units throughout the code. 
        The user should be aware that, although the use of obspy's 'minradius' and 
        'maxradius' will not result in any error, their use is suggested against. 
        In fact, if 'distmin' and 'distmax' are not specified, their default value 
        will be used in the downloads. And if this default is more "restrictive" than 
        'minradius' and 'maxradius', 'minradius' and 'maxradius' will simpy be ignored 
        in the downloads.
    ..


    **sleep_time_after_exception** (``float`` | ``int``): Time to wait (in s) after an obspy.clients.fdsn.header.FDSNException. The excpetion could be due to temporal issues of the client, so waiting a little bit before the next download could be useful to get things back to normality.

    **verbose** (``bool``): If True, information about the downloads will be printed in console


*Attributes*
------------

    **savedir** (``str``): Absolute path of the directory that will be created

    **staclient** (``obspy.clients.fdsn.Client``): Provider of station metadata and waveforms

    **evclient** (``obspy.clients.fdsn.Client``): Provider of events metadata

    **channels** (``list``): List of candidate channels for the downloads

    **components** (``int``): Either 3 (ZNE) or 1 (Z)

    **vmin**, **vmax** (``float`` | ``int``): Minimum and maximum expected velocity of the surface waves

    **sampling_rate** (``int`` | ``float``): Sampling rate of the final seismograms

    **prefilter** (``tuple``): Filter applied to the waveform before removal of the instrument response

    **units** (``str``): Physical units of the final seismogram

    **attach_response** (``bool``): Whether or not the response information is attached to the waveforms during the download

    **verbose** (``bool``): Whether or not progress information are displayed in the console

    **sleep_time_after_exception** (``int`` | ``float``): The downloads are stopped for the specified time (in s) after a FDSN exception

    **distmin**, **distmax** (``float``): Minimum and maximum distance of a station from the epicenter (km)

    **depthmax** (``float``): Maximum depth of the earthquakes (km)

    **magmin**, **magmax** (``float``): Minimum and maximum magnitude

    **starttime**, **endtime** (``obspy.core.utcdatetime.UTCDateTime``): Starttime and entime of the events catalogue

    **stations_config**, **events_config** (``dict``): Dictionary object with information relevant to the download of the stations and events metadata

    **inventory** (``obspy.core.inventory.inventory.Inventory``): Stations metadata

    **_exceptions** (``collections.defaultdict(int)``): Dictionary object with information on the occurred exceptions

    **_downloaded** (``int``): Number of waveforms downloaded

    **_no_stations** (``int``): Number of stations to download

    **_events_done** (``int``): Number of events for which the downloads have been finished


*Methods*
---------

.. py:method:: EQDownloader.build_inventory(**kwargs)
    :module: seislib.eq.MassDownloader_EQ
Builds an obspy inventory containing stations information.
The strategy is to first download inventory information at station level.
Then, for each station, the instrument response is downloaded for each
channel. This may increase the downloading time, but prevents possible
"timed out errors".

*Parameters*
~~~~~~~~~~~~

    **\*\*kwargs**: Additional key word arguments passed to the get_stations method of obspy.clients.fdsn.client

*Returns*
~~~~~~~~~

    ``obspy.core.inventory.inventory.Inventory``


.. py:method:: fetch_catalog(t1, t2, **kwargs)
Fetch catalog of seismic events
        
*Parameters*
~~~~~~~~~~~~

    **t1**, **t2** (``obspy.core.utcdatetime.UTCDateTime``): Starttime and endtime of the catalog

    **\*\*kwargs**: Additional key word arguments passed to obspy.clients.fdsn.client.Client.get_events   
    
        
*Returns*
~~~~~~~~~

    ``obspy.core.event.catalog.Catalog``


.. py:method:: active_channels(station)
Channels available for the given station among those to download

*Parameters*
~~~~~~~~~~~~

    **station** (``obspy.core.inventory.station.Station``)


*Returns*
~~~~~~~~~

    List of channels (``list``)


.. py:method:: collect_waveforms(network, station, channels, starttime, endtime)
Downloads the obspy stream

*Parameters*
~~~~~~~~~~~~

    **network**, **station** (``str``): network and station codes

    **channels** (``array-like``): iterable containing the channels codes suited to the download. 
    Iteratively, the download will be attempted on each of these channels (hence, higher priority 
    is given to lower indexes in `channels`). The first successfull 
    attempt determines the returned waveforms.

    **starttime**, **endtime** (``obspy.core.utcdatetime.UTCDateTime``): start and end time of the stream.

*Returns*
~~~~~~~~~

    ``obspy.core.stream.Stream`` if the download is successful, else None

.. py:method:: handle_multiple_locations(st, station_info)
Automatic selection of location

*Parameters*
~~~~~~~~~~~~

	**st** (``obspy.core.stream.Stream``)

	**station_info** (``obspy.core.inventory.station.Station``)

*Returns*
~~~~~~~~~

    ``obspy.core.stream.Stream``


.. py:method:: prepare_data(st)
Demean, detrend, tapering, removing response and resampling

*Parameters*
~~~~~~~~~~~~

	**st** (``obspy.core.stream.Stream``)

*Returns*
~~~~~~~~

    ``obspy.core.stream.Stream`` if the processing is successful, else ``None``

.. py:method:: adjust_channels(st)
If the stream contains the Z12 channels, these are rotated towards ZNE

*Parameters*
~~~~~~~~~~~~

	**st** (``obspy.core.stream.Stream``)

*Returns*
~~~~~~~~~

    ``obspy.core.stream.Stream`` if the rotation is not need or is successful, else ``None``

.. py:method:: select_components(st, baz)
Handles the absence of some components in the final stream

*Parameters*
~~~~~~~~~~~~

	**st** (``obspy.Stream``)

	**baz** (``int`` | ``float``): Back-azimuth (degrees) used for the rotation NE->RT

*Returns*
~~~~~~~~~

    st (``obspy.core.stream.Stream``): If the expected three-component stream lacks of
    one or both the horizontal components, the vertical component is returned. If the
    stream lacks the vertical component but has the two horizontal ones,
    it returns the horizontal components rotated towards the back
    azimuth. If only one horizontal component is available, it returns ``None``        


.. py:method:: preprocessing(st, station, baz)
Preprocessing of the obspy stream.

The function calls sequentially the methods 'handle_multiple_locations',
'prepare_data', and 'adjust_channels'.

*Parameters*
~~~~~~~~~~~~

	**st** (``obspy.core.stream.Stream``): 

	**station** (``obspy.core.inventory.station.Station``): 

	**baz** (``float``): Back azimuth (degrees) of the epicenter with respect to the receiver

*Returns*
~~~~~~~~

    ``obspy.core.stream.Stream`` if the preprocessing is successful, else ``None``


.. py:method:: compile_header_and_save(st, savedir, stla, stlo, stel, evla, evlo, evdp, otime, mag, dist, az, baz)
Compiles the header of the obspy stream (sac format) and writes to disk

*Parameters*
~~~~~~~~~~~~

	**stream** (``obspy.core.stream.Stream``): 

	**stla**, **stlo**, **stel** (``float``): latitude, longitude, elevation of the seismic station

	**evla**, **evlo**, **evdp** (``float``): latitude, longitude, depth of the earthquake

	**otime** (``obspy.core.utcdatetime.UTCDateTime``): Origin time of the earthquake

	**mag**, **dist** (``float``): Event magnitude and distance (km) of the event from the receiver

	**az**, **baz** (``float``): Azimuth and back azimuth of the epicenter with respect to the receiver


.. py:method:: plot_stations(ax=None, show=True, oceans_color='water', lands_color='land', edgecolor='k', projection='Mercator', resolution='110m', color_by_network=True, legend_dict={}, **kwargs)
Creates a maps of seismic receivers available for download

*Parameters*
~~~~~~~~~~~~

	**stations** (``dict``): Dictionary object containing stations information. This should structured so that each key corresponds to a station code ($network_code.$station_code) and each value is a tuple containing latitude and longitude of the station. For example: {net1.sta1 : (lat1, lon1), (lat2, lon2)}

	**ax** (``cartopy.mpl.geoaxes.GeoAxesSubplot``): If not None, the receivers are plotted on the GeoAxesSubplot instance. Otherwise, a new figure and GeoAxesSubplot instance is created

	**show** (``bool``): If True, the plot is shown. Otherwise, a GeoAxesSubplot instance is returned. Default is True

	**oceans_color**, **lands_color** (``str``): Color of oceans and lands. The arguments are ignored if ax is not None. Otherwise, they are passed to cartopy.feature.GSHHSFeature (to the argument 'facecolor'). Defaults are 'water' and 'land'

	**edgecolor** (``str``): Color of the boundaries between, e.g., lakes and land. The argument is ignored if ax is not None. Otherwise, it is passed to cartopy.feature.GSHHSFeature (to the argument 'edgecolor'). Default is 'k' (black)

	**projection** (``str``): Name of the geographic projection used to create the GeoAxesSubplot. (Visit the cartopy website for a list of valid projection names.) If ax is not None, `projection` is ignored. Default is 'Mercator'

	**resolution** (``str``): Resolution of the Earth features displayed in the figure. Passed to cartopy.feature.NaturalEarthFeature. Valid arguments are '110m', '50m', '10m'. Default is '110m'

	**color_by_network** (``bool``): If True, each seismic network will have a different color in the resulting map, and a legend will be displayed. Otherwise, all stations will have the same color. Default is True

	**legend_dict** (``dict``): Keyword arguments passed to matplotlib.pyplot.legend

	**\*\*kwargs**: Additional keyword arguments passed to matplotlib.pyplot.scatter

*Returns*
~~~~~~~~
    If `show` is True, ``None``, else `ax`, i.e. the ``GeoAxesSubplot``


.. py:method:: start()
Starts the downloads.

The catalog of seismic events is iterated over and, for each event, all
the waveforms from the receivers associated with `stations_config`
will be downloaded, if available. The waveforms are detrended, demeaned, 
removed of the instrument response, and resampled. Finally, they are
saved in savedir/data/event, where 'event' is the origin time (in the
obspy timestamp format) of the considered earthquake.

The algorithm keeps track of the progress made. This allows one to stop
the downloads and start from where it was left off at any time.


*Class Methods*
---------------

.. py:method:: inventory_iterator(inventory, reverse=False)
Generator function to iterate over an obspy inventory

*Parameters*
~~~~~~~~~~~~

	**inventory** (``obspy.core.inventory.inventory.Inventory``)

	**reverse** (``bool``): If True, the inventory will be iterated over from bottom to top


*Yields*
~~~~~~

    ``(2,) tuple`` containing network and station information at each iteration

.. py:method:: event_coordinates_and_time(event)
Fetch event coordinates (lat, lon, depth) and origin time

*Parameters*
~~~~~~~~~~~~

	**event** (``obspy.core.event.event.Event``)

*Returns*
~~~~~~~~

    ``(2,) tuple`` (**latitude**, **longitude**, **depth**), **origin_time** (``obspy.UTCDateTime.timestamp``)

.. py:method:: station_coordinates(station_info)
Fetch station coordinates (lat, lon, elevation)

*Parameters*
~~~~~~~~~~~~

	**station_info** (``obspy.core.inventory.station.Station``)


*Returns*
~~~~~~~~
    ``(3,) tuple`` (**latitude**, **longitude**, **elevation**)


.. py:method:: get_event_info(event)
Fetch event information

*Parameters*
~~~~~~~~~~~~

	**event** (``obspy.core.event.event.Event``)


*Returns*
~~~~~~~~

    ``(2,) tuple`` (**origin time**, **magnitude**), (**latitude**, **longitude**, **depth**)

.. py:method:: station_was_active(station, time)
Wheater or not the seismic station was active at the given time

*Parameters*
~~~~~~~~~~~~

	**station** (``obspy.core.inventory.station.Station``)

	**time** (``obspy.core.utcdatetime.UTCDateTime``)


*Returns*
~~~~~~~~

    ``bool``

